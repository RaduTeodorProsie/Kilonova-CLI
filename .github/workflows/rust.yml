name: Cross-platform Rust Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'The git tag to release (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: kilo-CLI
            asset_name: kilo-CLI-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            bin: kilo-CLI
            asset_name: kilo-CLI-macos-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: kilo-CLI.exe
            asset_name: kilo-CLI-windows-amd64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Run tests on macOS
        if: matrix.os == 'macos-latest'
        env:
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        run: cargo test --release --target ${{ matrix.target }}

      - name: Upload binary artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.bin }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries/
      
      - name: Flatten artifact directories
        run: |
          find binaries -mindepth 2 -type f -exec mv {} binaries/ \;
          find binaries -mindepth 1 -type d -empty -delete

      - name: Verify downloaded files
        run: ls -lR binaries

      - name: Create and publish GitHub Release
        uses: ncipollo/release-action@v1
        with:        
          tag: ${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag }}

          artifacts: "binaries/*"
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
