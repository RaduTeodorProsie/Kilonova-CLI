name: Cross-platform Rust Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'The git tag to release (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  # ===================================================================
  #  Build Job: Compile on each OS and create uniquely named files
  # ===================================================================
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Run all jobs even if one fails
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: kilo-CLI
            asset_name: kilo-CLI-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: kilo-CLI
            asset_name: kilo-CLI-macos-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: kilo-CLI.exe
            asset_name: kilo-CLI-windows-amd64.exe

    steps:
      - name: Checkout repository source code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Run tests on macOS (Optional)
        if: matrix.os == 'macos-latest'
        env:
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        run: cargo test --release --target ${{ matrix.target }}

      # Rename the binary to its final unique release name
      - name: Stage the binary with its unique release name
        shell: bash
        run: |
          mkdir -p staging
          mv target/${{ matrix.target }}/release/${{ matrix.bin_name }} staging/${{ matrix.asset_name }}

      - name: Upload the unique binary to pass to the release job
        uses: actions/upload-artifact@v4
        with:
          name: binaries # All jobs upload to the SAME artifact name.
          path: staging/* # The file inside has a unique name.
          retention-days: 1

  # ===================================================================
  #  Release Job: Create Release and upload the individual files
  # ===================================================================
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is required to create a GitHub Release
    steps:
      - name: Download all uniquely-named binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: final-assets/
      
      - name: "Display structure of downloaded files (for debugging)"
        run: ls -lR final-assets/

      # Create the GitHub Release and Upload Assets
      - name: Create GitHub Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "final-assets/*"
          tag: ${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag }}
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
