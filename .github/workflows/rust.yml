name: Cross-platform Rust Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'The git tag to release (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  # ===================================================================
  #  Build Job: Compile on each OS and create a UNIQUE artifact
  # ===================================================================
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Run all jobs even if one fails
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            bin_name: kilo-CLI
            asset_name: kilo-CLI-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_name: kilo-CLI
            asset_name: kilo-CLI-macos-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_name: kilo-CLI.exe
            asset_name: kilo-CLI-windows-amd64.exe

    steps:
      - name: Checkout repository source code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Run tests on macOS (Optional)
        if: matrix.os == 'macos-latest'
        env:
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        run: cargo test --release --target ${{ matrix.target }}

      # Stage the binary with its unique release name, as you did before. This is correct.
      - name: Stage the binary with its unique release name
        shell: bash
        run: |
          mkdir -p staging
          mv target/${{ matrix.target }}/release/${{ matrix.bin_name }} staging/${{ matrix.asset_name }}
          
      # --- THE CRITICAL FIX: Part 1 ---
      # Each parallel job MUST produce an artifact with a UNIQUE name.
      # We will use the asset_name, which is unique per OS.
      - name: Upload the unique binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }} # e.g., "kilo-CLI-linux-amd64"
          path: staging/*
          retention-days: 1

  # ===================================================================
  #  Release Job: Download all unique artifacts and upload individually
  # ===================================================================
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is required to create a GitHub Release
    if: success() # Only run if all build jobs passed

    steps:
      # --- THE CRITICAL FIX: Part 2 ---
      # Download ALL artifacts from the workflow run into one directory.
      - name: Download all release binaries
        uses: actions/download-artifact@v4
        with:
          # No name is specified, so it downloads every artifact.
          # The result is a simple, flat directory with all your binaries.
          path: final-assets/
          # New `actions/download-artifact` feature merges by default now.
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -lR final-assets/

      # This single action creates the release and uploads all the files individually.
      - name: Create GitHub Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # Find every file in our final directory. Because they are the only files
          # downloaded, this is safe and will upload each one individually.
          artifacts: "final-assets/*"
          
          # This correctly gets the tag from either the push event or the manual dispatch.
          tag: ${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag }}
          
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
